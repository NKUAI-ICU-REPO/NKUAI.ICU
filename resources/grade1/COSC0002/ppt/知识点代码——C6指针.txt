//#include<iostream>
//using namespace std;
//
////==========================================指针的声明=========================================
////int main()
////{
////	int a = 2;
////	int *p = &a;  //此处的*表示声明，不是取内容！一定要区分！
////	cout<<"Address of variable a is "<<&a<<endl; 
////	cout<<"Value of variable a is "<<a<<endl;
////	cout<<"Value of variable p is "<<p<<endl;
////	cout<<"Content of *p is "<<*p<<endl;
////	cout<<"Address of p is "<<&p<<endl;
////	return 0;
////}
//
//
//
//
////==========================================指针的表示方法=========================================
////char *backward(char *str)
////{
////	char *p1,*p2,t;
////	p1 = p2 = str;
////	while(*p2++);
////	p2 -= 2;
////	while(p1<p2){
////		t = *p1;
////		*p1++ = *p2;
////		*p2-- = t;
////	}
////	return str;
////}
////int main()
////{
////	char s[100];
////	cout<<"请输入一个字符串:";
////	cin>>s;
////	char *str0 = &s[0];//数组元素地址赋给指针变量
////	cout<<"字符串str0为:"<<str0<<endl;
////	char *str1 = s;//数组名赋值给指针变量
////	cout<<"字符串str1为:"<<str1<<endl;
////	char *str2 = "string example";//字符串常量赋值给指针变量
////	cout<<"字符串str2为:"<<str2<<endl;
////	char *str3 = backward(s);	
////	//返回值为指针的函数调用表达式赋给指针变量	
////	cout<<"字符串str为:"<<str3<<endl;
////	return 0;
////}
////
//
//
////==========================================指针的算术运算=========================================
////int main() {
////	int a[10];
////	for(int i=0;i<10;i++)
////	{
////		a[i] = i;
////	}	
////	int *p=a;
////	cout<<*p<<endl;
////	cout<<p[0]<<endl;
////	cout<<*a<<endl;
////	cout<<a[0]<<endl;
////	p++;
////	cout<<*p<<endl;
////	cout<<*(p+3)<<endl;
////	return 0;
////}
//
//
////======================================数组常量和常量指针===================================
////void main()
////{
////	char ch='a',ch1='x';
////	char * const ptr=&ch; 
////	//注意const放在类型说明之后，变量名之前
////	*ptr='b'; //正确，指向地址的值可以变
////	ptr=&ch1; //错误，指向的地址固定不变  
////
////	const char * ptr1=&ch;  //ptr1是常量指针
////	*ptr1='b'; //错误，指针指向地址的数据值不能改变	
////	ptr1=&ch1; //正确      指向的位置的值不能变
////
////}
//
//
////======================================指向一位数组元素的指针===================================
////int main(){
////  int i,fibon[10]={0,1,1,2,3,5,8,13,21,34},
////	  *pfib1,*pfib2;
////  pfib1=pfib2=fibon; //也可以用pfib1=pfib2=&fibon[0]
////  cout<<"使用数组显示斐波那契数列"<<endl;
////  for(i=0;i<10;i++)
////    cout<<fibon[i]<<'\t'<<pfib1[i]<<endl;
////  cout<<"使用指针显示斐波那契数列"<<endl;
////  for(i=0;i<10;i++)
////    cout<<*(fibon+i)<<'\t'<<*pfib2++<<endl;
////  cout<<"显示指针相减,应为数组长度:";
////  cout<<pfib2-pfib1<<endl; //pfib2已指向数组末尾
////  return 0;
////}
//
//
//
//
////==========================================数组指针=========================================
////void main(){
////	
////	int (*pa)[4];
////	//可理解为*pa为具有4个int型分量的一维数组名
////  	
////	int A[3][4]={{11,12,13,14}, {21,22,23,24},{31,32,33,34}};
////  	
////	pa=A;  
////	//pa指向A数组的第一行
////	
////	cout<<*(*(pa+2)+3)<<endl;
////	//pa+2值为地址
////	
////	cout<<(*pa)[0]<<" "<<(*pa)[1]<<" "<<(*pa)[2]<<" "<<(*pa)[3]<<endl; 
////	//输出第一行4元素 
////	
////	pa++; 
////	//一步向后“迈过”pa所指向的那一个一维数组的整体大小，使pa指向A数组的第二行 
////	
////	cout<<(*pa)[0]<<" "<<(*pa)[1]<<" "<<(*pa)[2]<<" "<<(*pa)[3]<<endl; 
////	//输出第二行4元素
////}
//
//
//
//
//
//
//
//
////==========================================二重指针=========================================
////int main(){
////	int **m ;
////	int a[2][4]={1,2,3,4,5,6,7,8};
////	int *pa[2]={a[0],a[1]};
////	for(int i=0;i<2;i++){
////		for(int j=0;j<4;j++)
////		{
////		    cout<<a[i][j]<<endl;
////		    cout<<&a[i][j]<<endl;
////		    cout<<&pa[i][j]<<endl;
////		}
////	}
////    cout<<"=========="<<endl;  
////	m=pa;
////	cout<<&pa<<endl;
////	cout<<m<<endl;   //pa数组的地址 
////	cout<<*m<<endl;  //pa数组的第一个元素，即a[0]数组的首地址，也就是“1”的地址 
////	cout<<**m<<endl; //pa数组的第一个元素的值 ，即 “1 ”
////
////	cout<<pa+1<<endl;           //pa数组的地址往后+1
////	cout<<*(pa+1)<<endl;        // pa数组的第二个元素，即a[1]数组的首地址，也就是“5”的地址 
////	cout<<*(*(pa+1))<<endl;   //pa数组的第二个元素的第一个值 ，即 “5”
////	
////   return 0;
////}
//
//
//
//
////==========================================指针数组与字符指针=========================================
////int main()
////{
////	char *menu[]={"File","Edit","Search","Help"};   //由四个指针（字符串）组成的指针数组 存的是四个数组
////
////	cout<<menu[0]<<endl;   //第一行 即第一个数组 是这个字符串
////	cout<<*menu<<endl;     //指针的值 存放的是数组 输出字符串    
////
////	cout<<*menu[0]<<endl;  //第一行 即第一个数组(存放的是首地址) 星号取值 获得值 就是第一个字符
////
////	cout<<&menu[0]<<endl;  //真正字母F的地址
////	
////    cout<<*(menu+1)<<endl;  //下移一行 依旧是指针的值 存放的是数组 输出字符串
////    cout<<*(menu+1)[1]<<endl;	//这是一个数组，就好像数组名a，[1]为取下一个元素，然后再取值！ 如同下一句
////    cout<<*((menu+1)[1])<<endl;
////	cout<<(*(menu+1))[1]<<endl;  //先下移一行取值，然后再移动 此处移动的就是列了
////
////    //要想输出字母r怎么办？  
////	cout<<*(*(menu+2)+3)<<endl;
////
////	system("pause");
////	return 0;
////}
//
//
//
////=========================================函数与指针=========================================
////void swap1(int *x,int *y)
////{
////	int temp = *x;
////	*x=*y;
////	*y=temp;
////}
////int main()
////{
////	int a=1,b=2;
////	cout<<"初始值：a="<<a<<", b="<<b<<endl;
////	int *p=&a,*q=&b;
////	//swap1(a,b);
////	//cout<<"执行swap(a,b)：a="<<a<<", b="<<b<<endl;
////	swap1(p,q);
////	cout<<"执行swap(p,q)：a="<<a<<", b="<<b<<endl;
////	swap1(&a,&b);
////	cout<<"执行swap(&a,&b)：a="<<a<<", b="<<b<<endl;
////	return 0;
////}
//
//
//
//
////==========================================函数与指针=========================================
////char *menuitem(char *menu[],int m)
////{
////    if((m>1)||(m<4))
////    {return menu[m];}
////    else
////    {return menu[0];}
////}  
////int main()
////{
////    char *menu[] = {"Error","File","Edit","Search","Help"};
////    int c;
////    cin>>c;
////    char *a = menuitem(menu,c);
////    cout<<a;
////	 system("pause");
////	 return 0;
////}
//
//
////==========================================动态内存分配=========================================
////void main()
////{
////	int a = 10;
////	int *p = &a;
////	cout<<"p="<<p<<endl;
////	p = new int;
////	cout<<"p="<<p<<endl;
////	delete p; //用new分配内存后，如果p又要指向其它地方，
////              //在指向其它地方之前，要delete
////	p = new int(5);
////	cout<<"p="<<p<<endl;
////	cout<<*p;
////	delete p;
////}
//
//
////====================================一维动态数组与一重指针=================================
////int main() 
////{
////	int i, n,*a, *p;
////	cout<<"Input number n:";
////	cin>>n;
////	a = new int[n];//此时n为变量，a指向动态数组
////	cout<<"input integers:"<<endl;
////	for(i=0; i<n; i++)
////	  	 cin>>*(a+i); 	//也可用a[i] 
////	cout<<"---- The result ----"<<endl;
////	for(p=a+n-1; p>=a; p--)   
////		cout<<*p<<" ";
////	cout<<endl;
////	return 0;
////} 
//
//
//
////====================================二维动态数组与二重指针=================================
////void main() {
////	int lin,col,i,j;
////	cout<<"lin,col=";
////	cin>>lin>>col; //任意输入行数lin及列数col
////	int **b;
////	b = new int*[lin]; //lin(行数)个“int*”指针
////                     //可以理解为b指向一维指针数组
////	for(i=0;i<lin;i++)
////	{
////		*(b+i) = new int[col];
////	}
////	//每行有col(列数)个int数
////	//此时的b成为动态(大小)的二维数组
////	
////	for(i=0;i<lin;i++)	
////	{
////	    for(j=0;j<col;j++) 
////		{	
////			*(*(b+i)+j)=i+j;
////			cout<<*(*(b+i)+j)<<"  ";
////		 }
////		 cout<<endl;
////	}
//// 	cout<<*(*b+2)<<endl;//b为b[0]地址，指针地址
////	cout<<**b+2<<endl;  //*b为b[0][0]的地址，指针值
////	cout<<**(b+2)<<endl;//**b为b[0][0]的值，指针所指地址值
////	for(i=0;i<lin;i++)
////	{
////		cout<<b+i<<endl;
////		for(j=0;j<col;j++)
////		{	
////			cout<<*(b+i)+j<<"	";
////		}
////		cout<<endl;
////	}
////}
//
//
//
//int count(int n)
//{
//	if (n == 1 || n == 2 || n == 3|| n == 4)
//		return 1;
//
//	//S(n)=2*S(n-1)-(S(n-2)-S(n-3))-(S(n-1)-S(n-2))=S(n-1)+2*S(n-3)
//	else
//        return count(n - 1) + count(n - 4);
//
//
//}
//
//
//int main()
//{
//	int n=1;
//	cin >> n;
//	if (n <= 0 || n >= 100)
//	{
//		cout << "WRONG!" << endl;
//		return -1;
//	}
//	while (n--)
//	{
//		int m;
//		cin >> m;
//		if (m <= 0 || m >= 46)
//		{
//			cout << "WRONG!" << endl;
//			//return -1;
//		}
//		else
//		{
//			cout << count(m) << endl;
//		}
//		
//	}
//
//	return 1;
//}